{
  "bodyContent": "# vue.js で jsx を始めよう 〜TODO アプリで触れる jsx〜\r\n\r\n## はじめに\r\n\r\nAsiaQuest 株式会社所属のフロントエンドエンジニアです\r\n数奇な運命に導かれて最近はhtml/cssしか書いてない\r\n\r\n## 対象読者\r\n\r\nvue.js の単一ファイルコンポーネントで開発したことがある人\r\njsx になじみがない人\r\n\r\n## TL;DR\r\n\r\n記法は違えど感覚は `<template>` にかなり近い\r\nreact 書いてる気持ちになる\r\n\r\n## jsx で vue を書くメリット\r\n\r\nvue.js好きですか？ 僕はまあまあ好きです\r\nvue は富豪的なフレームワークで独自の api が多く、\r\nいずれは rails や jquery と同じ道を辿るかも…という懸念があります\r\n\r\nとなるとフレームワークへの依存性を薄めた実装をしておけば\r\n=> リファクタしやすい\r\n=> 別ライブラリで書き直す時が来ても大丈夫！\r\n\r\nそこで react でおなじみの jsx で vue.js を書いてみましょう\r\n\r\n- 他の仮想 DOM ライブラリと同じ感覚で書ける\r\n- 将来的に vue.js を剥がしやすくなる\r\n- もうvue.jsエンジニア（そんな言葉があるか知らんけど）とは呼ばせない\r\n\r\nこんなメリットがあります\r\n\r\n## TODO アプリを jsx 表記で作ってみる\r\n\r\nnuxt.js でチャチャっと環境を用意します\r\n\r\n`$ npx create-nuxt-app <my-project>`\r\n\r\nvue で jsx を使うパッケージが最初から同梱されているためです\r\n今回主に触るのは `components` ディレクトリです、`pages`などは適宜やってください\r\n\r\n### render 関数を使って jsx を返せる => template タグを使わず書ける\r\n\r\nお馴染みの template 記法を jsx で書き直してみましょう\r\n\r\n```html\r\nvue sample\r\n\r\n<template>\r\n  <div>Todo</div>\r\n</template>\r\n```\r\n\r\n```js\r\ncomponents/TodoView.vue\r\n\r\n<script>\r\nexport default {\r\n  render(h) {\r\n    return <div>Todo</div>\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nrender 関数を使って div 要素を return することで、template 記法に近い感覚で書けます  \r\n※詳しくはこちら https://jp.vuejs.org/v2/guide/render-function.html\r\n\r\n複数行書く場合は jsx 部分を `()` で囲みます\r\n\r\n```js\r\ncomponents/TodoView.vue\r\n\r\nrender(h) {\r\n  return (\r\n    <div>\r\n      <h1>Todo</h1>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nそしてこの場合、 `<template>` タグがないので `.vue` ファイルにする必要もありません  \r\n`<script>` をとって `.js` として保存しても vue コンポーネントとして扱うことができます\r\n\r\n※`.js` の場合 `<style>` タグでスタイルをコンポーネントに紐付けることはできません、別途 css module などの導入が必要です\r\n\r\n### v-if での出し分けを jsx で実装してみる\r\n\r\n`v-if` を `jsx` で実装してみましょう\r\n`todoData`という配列の長さに応じて要素を出し分けます\r\n\r\n`{}` で括った中に式を書くことが出来ます\r\n`&&` で式を評価し、満たした場合に `jsx` を返します\r\nこれで `v-if` のような出し分けを再現できます\r\n\r\n```html\r\nvue sample\r\n\r\n<template>\r\n  <div>\r\n    <div v-if=\"todoData.length > 0\">\r\n      <div>item found</div>\r\n    </div>\r\n\r\n    <div v-if=\"todoData.length === 0\">\r\n      <div>no item found</div>\r\n    </div>\r\n  </div>\r\n<template>\r\n```\r\n\r\n```js\r\ncomponents / TodoView.vue\r\n\r\nrender(h) {\r\n  return (\r\n    <div>\r\n      {this.todoData.length > 0 && (\r\n        <div>\r\n          <div>item found</div>\r\n        </div>\r\n      )}\r\n\r\n      {this.todoData.length === 0 && <div>no item found</div>}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n### ビジネスロジックと view を分離してみる\r\n\r\ntemplate を持たないコンポーネントが明示的に作れるようになったので、 ビジネスロジックだけ提供するコンポーネントを `.js` 、見た目を担保するコンポーネントを `.vue` として完全に分けてみます\r\n\r\nこんなイメージです\r\n\r\n```\r\n.js ( data, methods, computed... )\r\n\r\n↓ data, methods, computedをpropsで渡す\r\n\r\n.vue ( propsを受け取って描画・スタイル設定 dataやmethodsは持たない )\r\n```\r\n\r\ndata や methods は全部 TodoContainer.js に持たせ、残りは props を元にレンダリングするだけのコンポーネントにします  \r\n挙動に関して記述されたファイルがひとつだけになので、機能追加や変更時に 1 ファイルを参照するだけですみます\r\n\r\n先ほど作った `TodoView.vue` を読み込み、props を付与して render で返すだけの `.js` コンポーネントを作ります\r\n\r\n```js\r\ncomponents / TodoContainer.js\r\n\r\nimport TodoView from './TodoView'\r\n\r\nexport default {\r\n  data() {\r\n    return { todoData: [] }\r\n  },\r\n  render() {\r\n    return <TodoView todoData={this.todoData} />\r\n  }\r\n}\r\n```\r\n\r\n以後、`data` や `method` は全てこのコンポーネントに書いていきます\r\n`TodoView` 側も props を受け取れるようにしておきましょう\r\n\r\n```js\r\ncomponents / TodoView.vue\r\n\r\nprops: {\r\n  todoData: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n},\r\n```\r\n\r\n### メソッドの実装\r\n\r\nTodo アプリの挙動を考えます\r\n\r\n- `input` にテキストを入力すると `TodoContainer` の `data: tempText` 文字列が書き換わる\r\n- `button` を押下すると `data: tempText` を元にオブジェクトを生成、 `TodoContainer` の `data: todoData` 配列に追加される\r\n\r\nこんな動きにしましょう\r\n\r\n今回は `$emit` も使わず親 > 子のみのフローとします  \r\n`data`, `methods` は全て `TodoContainer` に書いて `TodoView` へ `props` として渡します\r\n\r\n```js\r\ncomponents / TodoContainer.js\r\n\r\nimport TodoView from './TodoView'\r\n\r\nlet id = 0\r\nexport default {\r\n  data() {\r\n    return {\r\n      tempText: '',\r\n      todoData: []\r\n    }\r\n  },\r\n  methods: {\r\n    updateTempText(text) {\r\n      this.tempText = text\r\n    },\r\n    addItem() {\r\n      const newItem = {\r\n        id: id++,\r\n        name: this.tempText,\r\n        done: false\r\n      }\r\n      this.todoData = this.todoData.concat(newItem)\r\n    }\r\n  },\r\n  render() {\r\n    return (\r\n      <TodoView\r\n        todoData={this.todoData}\r\n        handleInput={this.updateTempText}\r\n        handleSubmit={this.addItem}\r\n      />\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n### イベント検知して親のメソッドを叩く\r\n\r\n入力部分のフォームを作ります\r\n\r\n```js\r\ncomponents/TodoView.vue\r\n\r\n<div>\r\n  <form>\r\n    <input />\r\n    <button type=\"submit\">ADD</button>\r\n  </form>\r\n\r\n  {/* 略 */}\r\n</div>\r\n```\r\n\r\n`props` で受け取った関数をイベント検知して叩きます  \r\n`onSubmit`、`onKeyup`と属性をベタ書きして見えますが、実際の html 出力時に属性としては残りません\r\n\r\n```js\r\ncomponents / TodoView.vue\r\n\r\nprops: {\r\n  todoData: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  handleInput: {\r\n    type: Function,\r\n    default: () => {}\r\n  },\r\n  handleSubmit: {\r\n    type: Function,\r\n    default: () => {}\r\n  }\r\n},\r\nrender(h) {\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          this.handleSubmit()\r\n        }}\r\n      >\r\n        <input onKeyup={e => this.handleInput(e.target.value)} />\r\n        <button type=\"submit\">ADD</button>\r\n      </form>\r\n\r\n      {/* 略 */}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nこれで `input` 入力時に `TodoContainer` の `data` を書き換え、`submit`時に todo を追加する部分が実装できました\r\n\r\n### v-for を実装する\r\n\r\nTodo 部分の view を作ります\r\n`v-for` を使わず、`map()` を使って実装します\r\n\r\n`todoData`をループして各要素ごとに`<div>{ name }</div>`を返すことで、`v-for`と同様の挙動を再現することができます\r\n\r\n```html\r\nvue sample\r\n\r\n<template>\r\n  <div v-if=\"todoData.length > 0\">\r\n    <div v-for=\"item in todoData\">\r\n      {{ item.name }}\r\n    </div>\r\n  </div>\r\n</template>\r\n```\r\n\r\n```js\r\ncomponents / TodoView.vue\r\n\r\n{\r\n  this.todoData.length > 0 && (\r\n    <div>\r\n      {this.todoData.map(item => (\r\n        <div>{item.name}</div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n### class を使ったスタイリング\r\n\r\n`.vue` ファイルでは通常の vue と同様、`<style>`タグを使ったスタイリングが可能です  \r\nreact とは異なり、属性名は`className`ではなく`class`表記になります\r\n\r\n## おしまい\r\n\r\nこれでごく基本的な説明は終了です\r\n責務ごとにコンポーネントを分けたり、`<style>`で css をつけたり、todo の 削除機能などは通常の vue.js 同様に試してみてください\r\n\r\n今回作成した内容は下記リポジトリへアップしています \r\nぜひご覧になってくださいね  \r\nhttps://github.com/masakitm/vue-jsx/blob/master/components/TodoContainer.js\r\nhttps://github.com/masakitm/vue-jsx/blob/master/components/TodoView.vue",
  "bodyHtml": "<h1>vue.js で jsx を始めよう 〜TODO アプリで触れる jsx〜</h1>\n<h2>はじめに</h2>\n<p>AsiaQuest 株式会社所属のフロントエンドエンジニアです\n数奇な運命に導かれて最近はhtml/cssしか書いてない</p>\n<h2>対象読者</h2>\n<p>vue.js の単一ファイルコンポーネントで開発したことがある人\njsx になじみがない人</p>\n<h2>TL;DR</h2>\n<p>記法は違えど感覚は <code>&lt;template&gt;</code> にかなり近い\nreact 書いてる気持ちになる</p>\n<h2>jsx で vue を書くメリット</h2>\n<p>vue.js好きですか？ 僕はまあまあ好きです\nvue は富豪的なフレームワークで独自の api が多く、\nいずれは rails や jquery と同じ道を辿るかも…という懸念があります</p>\n<p>となるとフレームワークへの依存性を薄めた実装をしておけば\n=&gt; リファクタしやすい\n=&gt; 別ライブラリで書き直す時が来ても大丈夫！</p>\n<p>そこで react でおなじみの jsx で vue.js を書いてみましょう</p>\n<ul>\n<li>他の仮想 DOM ライブラリと同じ感覚で書ける</li>\n<li>将来的に vue.js を剥がしやすくなる</li>\n<li>もうvue.jsエンジニア（そんな言葉があるか知らんけど）とは呼ばせない</li>\n</ul>\n<p>こんなメリットがあります</p>\n<h2>TODO アプリを jsx 表記で作ってみる</h2>\n<p>nuxt.js でチャチャっと環境を用意します</p>\n<p><code>$ npx create-nuxt-app &lt;my-project&gt;</code></p>\n<p>vue で jsx を使うパッケージが最初から同梱されているためです\n今回主に触るのは <code>components</code> ディレクトリです、<code>pages</code>などは適宜やってください</p>\n<h3>render 関数を使って jsx を返せる =&gt; template タグを使わず書ける</h3>\n<p>お馴染みの template 記法を jsx で書き直してみましょう</p>\n<pre><code class=\"hljs\">vue sample\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre><pre><code class=\"hljs\">components/TodoView.vue\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  render(h) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  }\n}\n&lt;<span class=\"hljs-regexp\">/script&gt;</span></code></pre><p>render 関数を使って div 要素を return することで、template 記法に近い感覚で書けます<br>\n※詳しくはこちら https://jp.vuejs.org/v2/guide/render-function.html</p>\n<p>複数行書く場合は jsx 部分を <code>()</code> で囲みます</p>\n<pre><code class=\"hljs\">components/TodoView.vue\n\nrender(h) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}</code></pre><p>そしてこの場合、 <code>&lt;template&gt;</code> タグがないので <code>.vue</code> ファイルにする必要もありません<br>\n<code>&lt;script&gt;</code> をとって <code>.js</code> として保存しても vue コンポーネントとして扱うことができます</p>\n<p>※<code>.js</code> の場合 <code>&lt;style&gt;</code> タグでスタイルをコンポーネントに紐付けることはできません、別途 css module などの導入が必要です</p>\n<h3>v-if での出し分けを jsx で実装してみる</h3>\n<p><code>v-if</code> を <code>jsx</code> で実装してみましょう\n<code>todoData</code>という配列の長さに応じて要素を出し分けます</p>\n<p><code>{}</code> で括った中に式を書くことが出来ます\n<code>&amp;&amp;</code> で式を評価し、満たした場合に <code>jsx</code> を返します\nこれで <code>v-if</code> のような出し分けを再現できます</p>\n<pre><code class=\"hljs\">vue sample\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"todoData.length &gt; 0\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>item found<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"todoData.length === 0\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>no item found<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></code></pre><pre><code class=\"hljs\">components / TodoView.vue\n\nrender(h) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      {this.todoData.length &gt; 0 &amp;&amp; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>item found<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      )}\n\n      {this.todoData.length === 0 &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>no item found<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}</code></pre><h3>ビジネスロジックと view を分離してみる</h3>\n<p>template を持たないコンポーネントが明示的に作れるようになったので、 ビジネスロジックだけ提供するコンポーネントを <code>.js</code> 、見た目を担保するコンポーネントを <code>.vue</code> として完全に分けてみます</p>\n<p>こんなイメージです</p>\n<pre><code>.js ( data, methods, computed... )\n\n↓ data, methods, computedをpropsで渡す\n\n.vue ( propsを受け取って描画・スタイル設定 dataやmethodsは持たない )\n</code></pre>\n<p>data や methods は全部 TodoContainer.js に持たせ、残りは props を元にレンダリングするだけのコンポーネントにします<br>\n挙動に関して記述されたファイルがひとつだけになので、機能追加や変更時に 1 ファイルを参照するだけですみます</p>\n<p>先ほど作った <code>TodoView.vue</code> を読み込み、props を付与して render で返すだけの <code>.js</code> コンポーネントを作ります</p>\n<pre><code class=\"hljs\">components / TodoContainer.js\n\n<span class=\"hljs-keyword\">import</span> TodoView <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./TodoView'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">todoData</span>: [] }\n  },\n  render() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TodoView</span> <span class=\"hljs-attr\">todoData</span>=<span class=\"hljs-string\">{this.todoData}</span> /&gt;</span>\n  }\n}</span></code></pre><p>以後、<code>data</code> や <code>method</code> は全てこのコンポーネントに書いていきます\n<code>TodoView</code> 側も props を受け取れるようにしておきましょう</p>\n<pre><code class=\"hljs\">components / TodoView.vue\n\nprops: {\n  <span class=\"hljs-attr\">todoData</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Array</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> []\n  }\n},</code></pre><h3>メソッドの実装</h3>\n<p>Todo アプリの挙動を考えます</p>\n<ul>\n<li><code>input</code> にテキストを入力すると <code>TodoContainer</code> の <code>data: tempText</code> 文字列が書き換わる</li>\n<li><code>button</code> を押下すると <code>data: tempText</code> を元にオブジェクトを生成、 <code>TodoContainer</code> の <code>data: todoData</code> 配列に追加される</li>\n</ul>\n<p>こんな動きにしましょう</p>\n<p>今回は <code>$emit</code> も使わず親 &gt; 子のみのフローとします<br>\n<code>data</code>, <code>methods</code> は全て <code>TodoContainer</code> に書いて <code>TodoView</code> へ <code>props</code> として渡します</p>\n<pre><code class=\"hljs\">components / TodoContainer.js\n\n<span class=\"hljs-keyword\">import</span> TodoView <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./TodoView'</span>\n\n<span class=\"hljs-keyword\">let</span> id = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">tempText</span>: <span class=\"hljs-string\">''</span>,\n      <span class=\"hljs-attr\">todoData</span>: []\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    updateTempText(text) {\n      <span class=\"hljs-keyword\">this</span>.tempText = text\n    },\n    addItem() {\n      <span class=\"hljs-keyword\">const</span> newItem = {\n        <span class=\"hljs-attr\">id</span>: id++,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-keyword\">this</span>.tempText,\n        <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">this</span>.todoData = <span class=\"hljs-keyword\">this</span>.todoData.concat(newItem)\n    }\n  },\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TodoView</span>\n        <span class=\"hljs-attr\">todoData</span>=<span class=\"hljs-string\">{this.todoData}</span>\n        <span class=\"hljs-attr\">handleInput</span>=<span class=\"hljs-string\">{this.updateTempText}</span>\n        <span class=\"hljs-attr\">handleSubmit</span>=<span class=\"hljs-string\">{this.addItem}</span>\n      /&gt;</span>\n    )\n  }\n}</span></code></pre><h3>イベント検知して親のメソッドを叩く</h3>\n<p>入力部分のフォームを作ります</p>\n<pre><code class=\"hljs\">components/TodoView.vue\n\n&lt;div&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>ADD<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\n\n  {<span class=\"hljs-comment\">/* 略 */</span>}\n&lt;<span class=\"hljs-regexp\">/div&gt;</span></code></pre><p><code>props</code> で受け取った関数をイベント検知して叩きます<br>\n<code>onSubmit</code>、<code>onKeyup</code>と属性をベタ書きして見えますが、実際の html 出力時に属性としては残りません</p>\n<pre><code class=\"hljs\">components / TodoView.vue\n\nprops: {\n  <span class=\"hljs-attr\">todoData</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Array</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> []\n  },\n  <span class=\"hljs-attr\">handleInput</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Function</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n  },\n  <span class=\"hljs-attr\">handleSubmit</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Function</span>,\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n  }\n},\nrender(h) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>\n        <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> {\n          e.preventDefault()\n          this.handleSubmit()\n        }}\n      &gt;\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onKeyup</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> this.handleInput(e.target.value)} /&gt;\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>ADD<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\n      {/* 略 */}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  )\n}</span></code></pre><p>これで <code>input</code> 入力時に <code>TodoContainer</code> の <code>data</code> を書き換え、<code>submit</code>時に todo を追加する部分が実装できました</p>\n<h3>v-for を実装する</h3>\n<p>Todo 部分の view を作ります\n<code>v-for</code> を使わず、<code>map()</code> を使って実装します</p>\n<p><code>todoData</code>をループして各要素ごとに<code>&lt;div&gt;{ name }&lt;/div&gt;</code>を返すことで、<code>v-for</code>と同様の挙動を再現することができます</p>\n<pre><code class=\"hljs\">vue sample\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"todoData.length &gt; 0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in todoData\"</span>&gt;</span>\n      {{ item.name }}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre><pre><code class=\"hljs\">components / TodoView.vue\n\n{\n  <span class=\"hljs-keyword\">this</span>.todoData.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      {this.todoData.map(item =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{item.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}</code></pre><h3>class を使ったスタイリング</h3>\n<p><code>.vue</code> ファイルでは通常の vue と同様、<code>&lt;style&gt;</code>タグを使ったスタイリングが可能です<br>\nreact とは異なり、属性名は<code>className</code>ではなく<code>class</code>表記になります</p>\n<h2>おしまい</h2>\n<p>これでごく基本的な説明は終了です\n責務ごとにコンポーネントを分けたり、<code>&lt;style&gt;</code>で css をつけたり、todo の 削除機能などは通常の vue.js 同様に試してみてください</p>\n<p>今回作成した内容は下記リポジトリへアップしています\nぜひご覧になってくださいね<br>\nhttps://github.com/masakitm/vue-jsx/blob/master/components/TodoContainer.js\nhttps://github.com/masakitm/vue-jsx/blob/master/components/TodoView.vue</p>\n",
  "title": "vue.js で jsx を始めよう 〜TODO アプリで触れる jsx〜",
  "dir": "articles",
  "base": "000.json",
  "ext": ".json",
  "sourceBase": "000.md",
  "sourceExt": ".md"
}